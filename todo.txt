--ms オプション 64 bit 例外処理
x64, x86 両方でほぼ異なる実装が必要だったが文字列をスローしてキャッチする
サンプルがなんとかパスしている.

x64 に関してはスローされた文字列のアドレスがどこに格納されるかが現状不明.

x86 の場合 :

t0 := here_info
...
p := catch_begin t0

p は ebp-24 に確保されているが, この ebp 相対 -24 の値を
__catchsym$?f@@YAHXZ	DD	01H
	DD	??_R0PAD
	DD	-24        <--- ここに指定する
        ...

x64 の場合 :

void f() {
  try { g(); }
  catch (const char* p) { h(p); }
}

h(p) の部分は

f のボディとは別に

?catch$0@?0??f@@YAXXZ@4HA PROC	FRAME
  ...
?catch$0@?0??f@@YAXXZ@4HA ENDP

のように別の函数で実行されるが, このときの rbp は f のボディの
ものとは一致していない(謎).

p は hcxx1 の場合 rbp - 32 に 確保されている.
p は cl の場合 rbp + 8 に確保されている.

cl で
     lea	rbp, QWORD PTR [rdx+32]
としている部分を
     lea	rbp, QWORD PTR [rdx+72]
として無理やりアドレスを合わせてパスしている状況.
--------------------------------------------------------------------
--ms モード
main 函数を正しくコンパイルできていない. しょうがないのでテストでは main
函数からテストプログラムの main 函数を呼び出すといったことをしている.

main 函数で hello world を印字するプログラムのリンクで

1>a.obj : error LNK2019: 未解決の外部シンボル __acrt_iob_func が関数 printf で参照されました
1>a.obj : error LNK2019: 未解決の外部シンボル __local_stdio_printf_options が関数 printf で参照されました
1>a.obj : error LNK2019: 未解決の外部シンボル __stdio_common_vfprintf が関数 printf で参照されました

というエラーが出てしまう.

cl.exe で通常通り hello world を印字するプログラムをコンパイルすると

      __acrt_iob_func  ではなく
      
__imp___acrt_iob_func  らしい

      __stdio_common_vfprintf ではなく

__imp___stdio_common_vfprintf  らしい

しかし __local_stdio_printf_options に関しては外部参照ではなくコンパイルした
ファイルの中に定義が存在している.

__acrt_iob_func は

d:/Windows Kits/10/Include/10.0.17763.0/ucrt/corecrt_wstdio.h

にその宣言があり

_ACRTIMP_ALT FILE* __cdecl __acrt_iob_func(unsigned _Ix);

のように書かれているがプリプロセスの結果は

FILE*   __acrt_iob_func(unsigned _Ix);

である. 同様に

__stdio_common_vfprintf も

d:/Windows Kits/10/Include/10.0.17763.0/ucrt/stdio.h

にその宣言があり

_ACRTIMP int __cdecl __stdio_common_vfprintf(

のように書かれている.

__local_stdio_printf_options に関しては

D:/Windows Kits/10/Include/10.0.17763.0/ucrt/corecrt_stdio_config.h

にその inline 定義があるが vs_header_conv.pl でこれを書き換えている.
---------------------------------------------------------------------
reference_constant から派生したオブジェクトに対して, 以下のように, まとめて
特定のメンバ函数を呼び出すコードが成立していない.

	const vector<reference_constant*>& all = reference_constant::m_all;
	for_each(all.begin(), all.end(), mem_fun(&reference_constant::output));

しょうがないので現状個別にメンバ函数を呼び出している.
---------------------------------------------------------------------
3_Real_floating_and_integer/1_ok/test00{0,1,2}.c

--ms --x86 指定時, 実行時に Floating point inexact result 例外が発生して
いる.
-------------------------------------------------------------------
3_Expressions/16_Assignment_operators/1_ok/test003.c

--ms --x86 指定時, 実行時に Floating point inexact result 例外が発生して
いる. 函数 test0211 で 2 つ目の printf を呼び出す前のスタックは期待通りで

|     |
+-----+ <---- esp
|  <-------"%d, %f\n" のアドレス
+-----+
|  <------ x の値 0xc8 = 200
+-----+
|     |
|  <------ y の値 8.0
+-----+
|     |

のようになっていることを確認した.
---------------------------------------------------------------------
3_Expressions/16_Assignment_operators/1_ok/test000.c

実行時に Floating point inexact result 例外が発生していることのみ確認した.
---------------------------------------------------------------------
4_Character_constants/1_ok/test00{0,5}.c

--ms --x86 cygwin 版, VS 版.
(但し 2018.08.21 の試験では VS Release 版で test000.c のみ再現)
Segmentation fault により実行時エラーになるが, VS から実行すると再現しない.
chkstc が呼ばれるべきなのに、呼ばれてないとか(?)
---------------------------------------------------------------------
13_Nonlocal_jumps/test00{0,1,2}.c

--ms 指定時. setjmp の呼び出しは第 2 引数に以下のように rbp - (stack サイズ)を指
定する必要がある. 以下はスタックサイズ 0x20 の例

        rcx に第一引数をセットした状態

	mov         rdx,rbp
	add         rdx,0FFFFFFFFFFFFFFE0h
	call        _setjmp

これを指定しないと, nt.dll 内で不正メモリアクセスが発生する. さらに
函数の入り口でスタックを 0xcc で埋めるコードも必要になる. これをしないと
0xC0000028 例外が発生する. この対応はターゲットコードの Debug ビルドのみ
有効で Release ビルドではまた別の対応が必要になる. また --x86 に
対しても似たような対応が必要になる.
---------------------------------------------------------------------
